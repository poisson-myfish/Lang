module Parser where
import Types
import Lexer

data Expression = ExprFunDecl String DataType  -- name, data type
                | ExprFunCall String           -- name
                deriving (Show, Eq)


parseFunDecl :: [Token] -> (Expression, [Token])
parseFunDecl ts =
  let ((TokenId name) : TokenDoubleColon : (TokenId dtype) : TokenParenLeft : TokenParenRight : ts') = ts
  in
    (ExprFunDecl name (getDataType dtype), ts')


parse :: [Token] -> [Expression]
parse [] = []
parse (t : ts) =
  case t of
    TokenFun -> (fst fd) : parse (snd fd)  where fd = parseFunDecl ts
    _ -> parse ts
